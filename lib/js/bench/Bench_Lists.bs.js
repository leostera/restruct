// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var ReBench = require("@ostera/rebench/lib/js/src/ReBench.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReStruct_Lazy_List$OsteraRestruct = require("../src/ReStruct_Lazy_List.bs.js");

function make_lazy_list(x) {
  return ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
}

function make_strict_list(x) {
  var _param = /* tuple */[
    x,
    /* [] */0
  ];
  while(true) {
    var param = _param;
    var n = param[0];
    if (n !== 0) {
      _param = /* tuple */[
        n - 1 | 0,
        /* :: */[
          0,
          param[1]
        ]
      ];
      continue ;
    } else {
      return param[1];
    }
  };
}

function make_belt_list(x) {
  return Belt_List.make(x, 0);
}

function make_belt_array(x) {
  return Belt_Array.make(x, 0);
}

function make_array(x) {
  return Caml_array.caml_make_vect(x, 0);
}

function make_lazy_list$1(x, _) {
  ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
  return /* () */0;
}

function make_strict_list$1(x, _) {
  make_strict_list(x);
  return /* () */0;
}

function make_strict_belt_list(x, _) {
  Belt_List.make(x, 0);
  return /* () */0;
}

function make_array$1(_, _$1) {
  return /* () */0;
}

function make_belt_array$1(x, _) {
  Belt_Array.make(x, 0);
  return /* () */0;
}

function run(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "List.Make", param);
                          }), ReBench.add("List (inductive)", (function () {
                                make_strict_list(size);
                                return /* () */0;
                              }), ReBench.add("ReStruct.Lazy.List.make", (function () {
                                    ReStruct_Lazy_List$OsteraRestruct.make(size, 0);
                                    return /* () */0;
                                  }), ReBench.add("Belt.List.make", (function () {
                                        Belt_List.make(size, 0);
                                        return /* () */0;
                                      }), ReBench.add("Belt.Array.make", (function () {
                                            Belt_Array.make(size, 0);
                                            return /* () */0;
                                          }), ReBench.add("Array.make", (function () {
                                                return /* () */0;
                                              }), ReBench.make(/* () */0))))))))));
}

var Make = /* module */[
  /* make_lazy_list */make_lazy_list$1,
  /* make_strict_list */make_strict_list$1,
  /* make_strict_belt_list */make_strict_belt_list,
  /* make_array */make_array$1,
  /* make_belt_array */make_belt_array$1,
  /* run */run
];

function append_lazy_list(x) {
  var l = ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
  var l$prime = ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
  return (function () {
      ReStruct_Lazy_List$OsteraRestruct.append(l, l$prime);
      return /* () */0;
    });
}

function append_strict_belt_list(x) {
  var l = make_strict_list(x);
  var l$prime = make_strict_list(x);
  return (function () {
      Belt_List.concat(l, l$prime);
      return /* () */0;
    });
}

function append_strict_list(x) {
  var l = make_strict_list(x);
  var l$prime = make_strict_list(x);
  return (function () {
      List.append(l, l$prime);
      return /* () */0;
    });
}

function append_belt_array(x) {
  var l = Belt_Array.make(x, 0);
  var l$prime = Belt_Array.make(x, 0);
  return (function () {
      Belt_Array.concat(l, l$prime);
      return /* () */0;
    });
}

function append_array(x) {
  var l = Caml_array.caml_make_vect(x, 0);
  var l$prime = Caml_array.caml_make_vect(x, 0);
  return (function () {
      $$Array.append(l, l$prime);
      return /* () */0;
    });
}

function run$1(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "List.Append", param);
                          }), ReBench.add("List.append", append_strict_list(size), ReBench.add("ReStruct.Lazy.List.append", append_lazy_list(size), ReBench.add("Belt.List.concat", append_strict_belt_list(size), ReBench.add("Belt.Array.concat", append_belt_array(size), ReBench.add("Array.append", append_array(size), ReBench.make(/* () */0))))))))));
}

var Append = /* module */[
  /* append_lazy_list */append_lazy_list,
  /* append_strict_belt_list */append_strict_belt_list,
  /* append_strict_list */append_strict_list,
  /* append_belt_array */append_belt_array,
  /* append_array */append_array,
  /* run */run$1
];

function take_lazy_list(x) {
  var l = ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
  return (function () {
      ReStruct_Lazy_List$OsteraRestruct.take(x, l);
      return /* () */0;
    });
}

function take_strict_list(x) {
  var l = make_strict_list(x);
  return (function () {
      Belt_List.take(l, x);
      return /* () */0;
    });
}

function take_array(x) {
  var l = Caml_array.caml_make_vect(x, 0);
  return (function () {
      Belt_Array.slice(l, 0, x);
      return /* () */0;
    });
}

function run$2(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "List.take", param);
                          }), ReBench.add("ReStruct.Lazy.List.take", take_lazy_list(size), ReBench.add("Belt.List.take", take_strict_list(size), ReBench.add("Belt.Array.slice", take_array(size), ReBench.make(/* () */0))))))));
}

var Take = /* module */[
  /* take_lazy_list */take_lazy_list,
  /* take_strict_list */take_strict_list,
  /* take_array */take_array,
  /* run */run$2
];

function drop_lazy_list(x) {
  var l = ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
  return (function () {
      ReStruct_Lazy_List$OsteraRestruct.drop(x, l);
      return /* () */0;
    });
}

function drop_strict_list(x) {
  var l = make_strict_list(x);
  return (function () {
      Belt_List.drop(l, x);
      return /* () */0;
    });
}

function drop_array(x) {
  var l = Caml_array.caml_make_vect(x, 0);
  return (function () {
      Belt_Array.sliceToEnd(l, x);
      return /* () */0;
    });
}

function run$3(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "List.drop", param);
                          }), ReBench.add("ReStruct.Lazy.List.drop", drop_lazy_list(size), ReBench.add("Belt.List.drop", drop_strict_list(size), ReBench.add("Belt.Array.sliceToEnd", drop_array(size), ReBench.make(/* () */0))))))));
}

var Drop = /* module */[
  /* drop_lazy_list */drop_lazy_list,
  /* drop_strict_list */drop_strict_list,
  /* drop_array */drop_array,
  /* run */run$3
];

function reverse_lazy_list(x) {
  var l = ReStruct_Lazy_List$OsteraRestruct.make(x, 0);
  return (function () {
      ReStruct_Lazy_List$OsteraRestruct.reverse(l);
      return /* () */0;
    });
}

function reverse_strict_list(x) {
  var l = make_strict_list(x);
  return (function () {
      Belt_List.reverse(l);
      return /* () */0;
    });
}

function reverse_array(x) {
  var l = Caml_array.caml_make_vect(x, 0);
  return (function () {
      Belt_Array.reverse(l);
      return /* () */0;
    });
}

function run$4(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "List.reverse", param);
                          }), ReBench.add("ReStruct.Lazy.List.reverse", reverse_lazy_list(size), ReBench.add("Belt.List.reverse", reverse_strict_list(size), ReBench.add("Belt.Array.reverse", reverse_array(size), ReBench.make(/* () */0))))))));
}

var Reverse = /* module */[
  /* reverse_lazy_list */reverse_lazy_list,
  /* reverse_strict_list */reverse_strict_list,
  /* reverse_array */reverse_array,
  /* run */run$4
];

exports.make_lazy_list = make_lazy_list;
exports.make_strict_list = make_strict_list;
exports.make_belt_list = make_belt_list;
exports.make_belt_array = make_belt_array;
exports.make_array = make_array;
exports.Make = Make;
exports.Append = Append;
exports.Take = Take;
exports.Drop = Drop;
exports.Reverse = Reverse;
/* ReBench Not a pure module */
