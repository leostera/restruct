// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReBench$Restruct = require("./ReBench.bs.js");
var Bench_Utils$Restruct = require("./Bench_Utils.bs.js");

function make_lazy_list(x) {
  var _param = /* tuple */[
    x,
    /* Nil */0
  ];
  while(true) {
    var param = _param;
    var n = param[0];
    if (n !== 0) {
      _param = /* tuple */[
        n - 1 | 0,
        /* Cons */[
          0,
          Block.__(250, [param[1]])
        ]
      ];
      continue ;
    } else {
      return param[1];
    }
  };
}

function make_strict_list(x) {
  var _param = /* tuple */[
    x,
    /* [] */0
  ];
  while(true) {
    var param = _param;
    var n = param[0];
    if (n !== 0) {
      _param = /* tuple */[
        n - 1 | 0,
        /* :: */[
          0,
          param[1]
        ]
      ];
      continue ;
    } else {
      return param[1];
    }
  };
}

function make_array(x) {
  return Caml_array.caml_make_vect(x, 0);
}

function make_lazy_list$1(x, _) {
  make_lazy_list(x);
  return /* () */0;
}

function make_strict_list$1(x, _) {
  make_strict_list(x);
  return /* () */0;
}

function make_array$1(_, _$1) {
  return /* () */0;
}

function run(size) {
  return ReBench$Restruct.run({
              async: true
            }, ReBench$Restruct.on(/* Complete */2, (function () {
                    console.log("Complete!");
                    return /* () */0;
                  }), ReBench$Restruct.on(/* Cycle */1, Bench_Utils$Restruct.default_printer, ReBench$Restruct.on(/* Start */0, (function () {
                            console.log("Begin Build Benchmark");
                            return /* () */0;
                          }), ReBench$Restruct.add("Built-in List Build", (function () {
                                make_strict_list(size);
                                return /* () */0;
                              }), ReBench$Restruct.add("Built-in Array Build", (function () {
                                    return /* () */0;
                                  }), ReBench$Restruct.add("Lazy.List Build", (function () {
                                        make_lazy_list(size);
                                        return /* () */0;
                                      }), ReBench$Restruct.make(/* () */0))))))));
}

var Build = /* module */[
  /* make_lazy_list */make_lazy_list$1,
  /* make_strict_list */make_strict_list$1,
  /* make_array */make_array$1,
  /* run */run
];

var ConsumeWithTail = /* module */[];

exports.make_lazy_list = make_lazy_list;
exports.make_strict_list = make_strict_list;
exports.make_array = make_array;
exports.Build = Build;
exports.ConsumeWithTail = ConsumeWithTail;
/* ReBench-Restruct Not a pure module */
