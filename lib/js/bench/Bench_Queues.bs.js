// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var ReBench = require("@ostera/rebench/lib/js/src/ReBench.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReStruct_BankersQueue$OsteraRestruct = require("../src/ReStruct_BankersQueue.bs.js");
var ReStruct_BatchedQueue$OsteraRestruct = require("../src/ReStruct_BatchedQueue.bs.js");
var ReStruct_Lazy_RealTimeQueue$OsteraRestruct = require("../src/ReStruct_Lazy_RealTimeQueue.bs.js");

function make_batched_queue(x) {
  var _param = /* tuple */[
    ReStruct_BatchedQueue$OsteraRestruct.empty,
    x
  ];
  while(true) {
    var param = _param;
    var x$1 = param[1];
    var q = param[0];
    if (x$1 !== 0) {
      _param = /* tuple */[
        ReStruct_BatchedQueue$OsteraRestruct.push(q, 0),
        x$1 - 1 | 0
      ];
      continue ;
    } else {
      return q;
    }
  };
}

function consume_batched_queue(_q) {
  while(true) {
    var q = _q;
    var match = ReStruct_BatchedQueue$OsteraRestruct.tail(q);
    if (match !== undefined) {
      _q = Js_primitive.valFromOption(match);
      continue ;
    } else {
      return undefined;
    }
  };
}

function make_bankers_queue(x) {
  var _param = /* tuple */[
    ReStruct_BankersQueue$OsteraRestruct.empty,
    x
  ];
  while(true) {
    var param = _param;
    var x$1 = param[1];
    var q = param[0];
    if (x$1 !== 0) {
      _param = /* tuple */[
        ReStruct_BankersQueue$OsteraRestruct.push(q, 0),
        x$1 - 1 | 0
      ];
      continue ;
    } else {
      return q;
    }
  };
}

function consume_bankers_queue(_q) {
  while(true) {
    var q = _q;
    var match = ReStruct_BankersQueue$OsteraRestruct.tail(q);
    if (match !== undefined) {
      _q = Js_primitive.valFromOption(match);
      continue ;
    } else {
      return undefined;
    }
  };
}

function make_realtime_queue(x) {
  var _param = /* tuple */[
    ReStruct_Lazy_RealTimeQueue$OsteraRestruct.empty,
    x
  ];
  while(true) {
    var param = _param;
    var x$1 = param[1];
    var q = param[0];
    if (x$1 !== 0) {
      _param = /* tuple */[
        ReStruct_Lazy_RealTimeQueue$OsteraRestruct.push(q, 0),
        x$1 - 1 | 0
      ];
      continue ;
    } else {
      return q;
    }
  };
}

function consume_realtime_queue(_q) {
  while(true) {
    var q = _q;
    var match = ReStruct_Lazy_RealTimeQueue$OsteraRestruct.tail(q);
    if (match !== undefined) {
      _q = Js_primitive.valFromOption(match);
      continue ;
    } else {
      return undefined;
    }
  };
}

var Helpers = /* module */[
  /* make_batched_queue */make_batched_queue,
  /* consume_batched_queue */consume_batched_queue,
  /* make_bankers_queue */make_bankers_queue,
  /* consume_bankers_queue */consume_bankers_queue,
  /* make_realtime_queue */make_realtime_queue,
  /* consume_realtime_queue */consume_realtime_queue
];

function push_batched_queue(x, _) {
  make_batched_queue(x);
  return /* () */0;
}

function push_bankers_queue(x, _) {
  make_bankers_queue(x);
  return /* () */0;
}

function push_realtime_queue(x, _) {
  make_realtime_queue(x);
  return /* () */0;
}

function run(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "Queue.Push", param);
                          }), ReBench.add("ReStruct.Lazy.RealTimeQueue.push", (function (param) {
                                return push_realtime_queue(size, param);
                              }), ReBench.add("ReStruct.BankersQueue.push", (function (param) {
                                    return push_bankers_queue(size, param);
                                  }), ReBench.add("ReStruct.BatchedQueue.push", (function (param) {
                                        return push_batched_queue(size, param);
                                      }), ReBench.make(/* () */0))))))));
}

var Push = /* module */[
  /* push_batched_queue */push_batched_queue,
  /* push_bankers_queue */push_bankers_queue,
  /* push_realtime_queue */push_realtime_queue,
  /* run */run
];

function tail_batched_queue(x) {
  var q = make_batched_queue(x);
  return (function () {
      ReStruct_BatchedQueue$OsteraRestruct.tail(q);
      return /* () */0;
    });
}

function tail_bankers_queue(x) {
  var q = make_bankers_queue(x);
  return (function () {
      ReStruct_BankersQueue$OsteraRestruct.tail(q);
      return /* () */0;
    });
}

function tail_realtime_queue(x) {
  var q = make_realtime_queue(x);
  return (function () {
      ReStruct_Lazy_RealTimeQueue$OsteraRestruct.tail(q);
      return /* () */0;
    });
}

function run$1(size) {
  var partial_arg = ReBench.Utils[/* default_announcer */0];
  return ReBench.run({
              async: false
            }, ReBench.on(/* Complete */2, (function () {
                    console.log("");
                    return /* () */0;
                  }), ReBench.on(/* Cycle */1, ReBench.Utils[/* default_printer */1], ReBench.on(/* Start */0, (function (param) {
                            return partial_arg(size, "Queue.Tail", param);
                          }), ReBench.add("ReStruct.Lazy.RealTimeQueue.tail", tail_realtime_queue(size), ReBench.add("ReStruct.BankersQueue.tail", tail_bankers_queue(size), ReBench.add("ReStruct.BatchedQueue.tail", tail_batched_queue(size), ReBench.make(/* () */0))))))));
}

var Tail = /* module */[
  /* tail_batched_queue */tail_batched_queue,
  /* tail_bankers_queue */tail_bankers_queue,
  /* tail_realtime_queue */tail_realtime_queue,
  /* run */run$1
];

exports.Helpers = Helpers;
exports.Push = Push;
exports.Tail = Tail;
/* ReBench Not a pure module */
