// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");

function make(x, el) {
  var _n = x;
  var _acc = /* Nil */0;
  while(true) {
    var acc = _acc;
    var n = _n;
    if (n !== 0) {
      _acc = Block.__(246, [(function(acc){
          return function () {
            return /* Cons */[
                    el,
                    acc
                  ];
          }
          }(acc))]);
      _n = n - 1 | 0;
      continue ;
    } else {
      return acc;
    }
  };
}

function isEmpty(l) {
  var tag = l.tag | 0;
  var match = tag === 250 ? l[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(l) : l
    );
  if (match) {
    return false;
  } else {
    return true;
  }
}

function of_list(param) {
  if (param) {
    var xs = param[1];
    var x = param[0];
    return Block.__(246, [(function () {
                  return /* Cons */[
                          x,
                          of_list(xs)
                        ];
                })]);
  } else {
    return /* Nil */0;
  }
}

function append(a, b) {
  var tag = a.tag | 0;
  var match = tag === 250 ? a[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(a) : a
    );
  if (match) {
    var aa$prime = match[1];
    var a$prime = match[0];
    return Block.__(246, [(function () {
                  return /* Cons */[
                          a$prime,
                          append(aa$prime, b)
                        ];
                })]);
  } else {
    return b;
  }
}

function head(x) {
  var tag = x.tag | 0;
  var match = tag === 250 ? x[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(x) : x
    );
  if (match) {
    return Js_primitive.some(match[0]);
  }
  
}

function tail(x) {
  var tag = x.tag | 0;
  var match = tag === 250 ? x[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(x) : x
    );
  if (match) {
    return match[1];
  }
  
}

function take(n, s) {
  if (n !== 0) {
    var tag = s.tag | 0;
    var match = tag === 250 ? s[0] : (
        tag === 246 ? CamlinternalLazy.force_lazy_block(s) : s
      );
    if (match) {
      var xs = match[1];
      var x = match[0];
      return Block.__(246, [(function () {
                    return /* Cons */[
                            x,
                            take(n - 1 | 0, xs)
                          ];
                  })]);
    } else {
      return /* Nil */0;
    }
  } else {
    return /* Nil */0;
  }
}

function drop(_n, _s) {
  while(true) {
    var s = _s;
    var n = _n;
    if (n !== 0) {
      var tag = s.tag | 0;
      var match = tag === 250 ? s[0] : (
          tag === 246 ? CamlinternalLazy.force_lazy_block(s) : s
        );
      if (match) {
        _s = match[1];
        _n = n - 1 | 0;
        continue ;
      } else {
        return /* Nil */0;
      }
    } else {
      return s;
    }
  };
}

function reverse(s) {
  var _a = s;
  var _b = /* Nil */0;
  while(true) {
    var b = _b;
    var a = _a;
    var tag = a.tag | 0;
    var match = tag === 250 ? a[0] : (
        tag === 246 ? CamlinternalLazy.force_lazy_block(a) : a
      );
    if (match) {
      var x = match[0];
      _b = Block.__(246, [(function(b,x){
          return function () {
            return /* Cons */[
                    x,
                    b
                  ];
          }
          }(b,x))]);
      _a = match[1];
      continue ;
    } else {
      return b;
    }
  };
}

exports.make = make;
exports.isEmpty = isEmpty;
exports.of_list = of_list;
exports.append = append;
exports.head = head;
exports.tail = tail;
exports.take = take;
exports.drop = drop;
exports.reverse = reverse;
/* No side effect */
