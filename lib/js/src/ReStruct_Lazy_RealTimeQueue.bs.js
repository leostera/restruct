// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var ReStruct_Lazy_List$OsteraRestruct = require("./ReStruct_Lazy_List.bs.js");

var empty = /* record */[
  /* front : Nil */0,
  /* rear : [] */0,
  /* schedule : Nil */0
];

function isEmpty(q) {
  return ReStruct_Lazy_List$OsteraRestruct.isEmpty(q[/* front */0]);
}

function rotate(param) {
  var schedule = param[/* schedule */2];
  var rear = param[/* rear */1];
  var front = param[/* front */0];
  var tag = front.tag | 0;
  var match = tag === 250 ? front[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(front) : front
    );
  if (match) {
    if (rear) {
      var rs = rear[1];
      var r = rear[0];
      var fs = match[1];
      var f = match[0];
      return Block.__(246, [(function () {
                    return /* Cons */[
                            f,
                            rotate(/* record */[
                                  /* front */fs,
                                  /* rear */rs,
                                  /* schedule */Block.__(246, [(function () {
                                          return /* Cons */[
                                                  r,
                                                  schedule
                                                ];
                                        })])
                                ])
                          ];
                  })]);
    } else {
      return schedule;
    }
  } else if (rear) {
    var r$1 = rear[0];
    return Block.__(246, [(function () {
                  return /* Cons */[
                          r$1,
                          schedule
                        ];
                })]);
  } else {
    return schedule;
  }
}

function exec(q) {
  var lzarg = q[/* schedule */2];
  var tag = lzarg.tag | 0;
  var match = tag === 250 ? lzarg[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(lzarg) : lzarg
    );
  if (match) {
    return /* record */[
            /* front */q[/* front */0],
            /* rear */q[/* rear */1],
            /* schedule */match[1]
          ];
  } else {
    var f$prime = rotate(/* record */[
          /* front */q[/* front */0],
          /* rear */q[/* rear */1],
          /* schedule : Nil */0
        ]);
    return /* record */[
            /* front */f$prime,
            /* rear : [] */0,
            /* schedule */f$prime
          ];
  }
}

function push(param, e) {
  return exec(/* record */[
              /* front */param[/* front */0],
              /* rear : :: */[
                e,
                param[/* rear */1]
              ],
              /* schedule */param[/* schedule */2]
            ]);
}

function head(param) {
  var front = param[/* front */0];
  var tag = front.tag | 0;
  var match = tag === 250 ? front[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(front) : front
    );
  if (match) {
    return Js_primitive.some(match[0]);
  }
  
}

function tail(param) {
  var front = param[/* front */0];
  var tag = front.tag | 0;
  var match = tag === 250 ? front[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(front) : front
    );
  if (match) {
    return exec(/* record */[
                /* front */match[1],
                /* rear */param[/* rear */1],
                /* schedule */param[/* schedule */2]
              ]);
  }
  
}

var M = /* module */[
  /* empty */empty,
  /* isEmpty */isEmpty,
  /* push */push,
  /* head */head,
  /* tail */tail
];

exports.M = M;
exports.empty = empty;
exports.isEmpty = isEmpty;
exports.push = push;
exports.head = head;
exports.tail = tail;
/* No side effect */
